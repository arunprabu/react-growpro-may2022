Webapps 
---
  1. Server Side Rendering Apps (SSR) / Traditional Webapps 
      * Pages will reload / refresh 

      Arch 
        1 Server 
        ---
          Resp: HTML, CSS, JS + Data 

      Codebase 
        1 Project 
        ----
          Front End (HTML, CSS, JS ) + Back End (Java/Dotnet/PHP/Python/Ruby) + DB Queries (SQL, NoSQL)  

      Disadv 
      ---
        1. Server has to do the heavy-lifting 
        2. Slower Webapps 
        3. More Bandwidth Consumption 
        4. More Expensive 
        5. Not a better user experience 


  2. Client Side Rendering Apps (CSR) / Modern Webapps 
      * Pages will not reload / refresh 

      Arch 
      --
        2 Servers 
          1 Front End Server (port 3000) - Single Page App (SPA)
              Resp: HTML, CSS, JS, placeholder for data (wait for data)

          1 Back End Server (port 8080 ) - RESTful API 
              Resp: Data (JSON) 

      Codebase 
      --
        2 Projects 
          1 Front End Project (HTML, CSS, JS)
          1 Back End Project (Java/DotNet/PHP/Python/Ruby + SQL, NoSQL)
      
      Adv
      ---
        1. Workload is shared between two servers 
        2. Faster Webapps 
        3. Less Bandwidth Consumption 
        4. Less Expensive 
        5. Better User Experience to end users 

      Disadv 
      --
        1. Not Search Engine Friendly (can be fixed)
        2. Initial Loading will take longer (can be fixed)

---
Single Page App (SPA)
---
  Characteristics (7)
  --
    1. Page should not reload / refresh 
    2. URL should change 
    3. History should be maintained without page refresh 
    4. Header and footer should be retained
    5. Page should be contextually updated in between header and footer (in b/w section should be updated)
    6. Active menu should be set [TODO]
    7. Page Title should be changed [TODO]

  SPA Frameworks / Libraries 
  ---
    #1 React JS (Library)
    #2 VueJS  (Framework)
    #3 Angular (Framework)

----


Why React?
Competitors 


What is React? 
Other Tools: 

React JS 
  File Walkthru 
  App Arch
  How react apps are running?


--
Components in React
--
  1. Functional Components 
    * will be coded as fn 
    1.1 Functional Components with Named Fn [DONE]
    1.2 Functional Components with Anonymous Fn [DONE]
    1.3 Functional Components with Arrow Fn (Recommended) [DONE]

  2. Class Components
    * will be coded as class 
    * containers 
    

---

TODO: Learn about integrating bootstrap in React 
Refer: https://create-react-app.dev/docs/adding-bootstrap/



==
JSX 
--
  * all elements should be closed (either self closing / separte closing)
  * class should become className 
  * inline styles will be different too 


-=----





Cross Component Communication / Sharing data across component 
--
  1. Parent Comp to Child Component Communication [DONE]
     using props 

  2. Child Comp to Parent Component Communication [TODO]
      using props, events, callback fn 
      Refer: render props in reactjs.org 

  3. Any to Any Component Communication
      using Context API of ReactJS Hooks 
      using Redux Framework 

-----
Project Structure
--
src/
  Components/   (functional components )
    Shared/
      Header/
        Header.js
        Header.css
        Header.test.js 
      Footer/
        Footer.js
        Footer.css
      Menu 
    Home/
      Home
      Program 
    Dashboard
    Reports
    Auth/
      Login
      Signup 
      ResetPW 
    About 
    Contact 
    Support
  Containers/  (class components )
    ChannelList

---

naming conventions
-
  * comp names PascalCase
  * variables, methods, event handlers -- in camelCase 
  * arrays -- in camelCase but in plural (colors, channels) or else (colorList, channelList)
  * objects - can have Data suffix (contactData) or else (contact)
  * booleans -- isLoggedIn, isValid, hasToken, isAuth 
  * event handler methods or functions in react -- should have handle Prefix or else Handler suffix 
      (handleAddToFavorite, addToFavouriteHandler)
  * never use snake case 

====



Routing in React 
---
  Step 1: 
    npm i react-router-dom

  Step 2: 
    Identify the URL's for each menu item
    Home          =>   localhost:3000/
    HOC Demo      =>   localhost:3000/hoc-demo
    Unit Testing  =>   localhost:3000/unit-testing
    Hooks Demo    =>   localhost:3000/hooks
    Products      =>   localhost:3000/context

  Step 3: 
    Let's setup the URL's properly in Menu comp.
    Check the app. URL's will change. Page will still refresh.

  Step 4: 
    Create the necessary comp for all the URL's 

    Home comp is already created. Let's create other components 

  Step 5: 
    in App Comp, Let's configure the routes 
    Put the whole app under <BrowserRouter>
    Then, in between header and footer, config the routes 
    <Routes>
      <Route path='/' element={<Home />} />
      <Route path='/hoc-demo' element={<HocDemo />} />
      <Route path='/unit-testing' element={<UnitTestingDemo />} />
      <Route path='/hooks' element={<HooksDemo />} />
      <Route path='/context' element={<ContextDemo />} />
    </Routes>
    
  Step 6: 
    Check the app. Page will still refresh. Fix it.
    Replace a href with NavLink to 
    <NavLink to="/" className="nav-link active" aria-current="page" >Home</NavLink>


  TODO: Setup active menu 
  TODO: Setup Page Title. Use react-helmet package


----

Working with useContext() Hook 
---
  Let's share data across comp 

  Step 1: 
    create context with any data or null 
    createContext() 
  
  Step 2: 
    Provide the data to the the whole app  
  
  Step 3: 
    Using Provider to share data across the few components 
    <Context.Provider>
      <Home />
      <About/>
    </Context.Provider>

  Step4: 
    consume the in the components 
    useContext()

==
Refer for More: 
==
https://designcode.io/react-hooks-handbook-usereducer-with-usecontext-1